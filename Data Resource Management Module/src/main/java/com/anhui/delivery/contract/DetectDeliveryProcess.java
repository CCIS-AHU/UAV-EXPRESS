package com.anhui.delivery.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class DetectDeliveryProcess extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_CHARGE = "charge";

    public static final String FUNC_CHECKRESULT = "checkResult";

    public static final String FUNC_COMPARESTR = "compareStr";

    public static final String FUNC_DRONETOORDER = "droneToOrder";

    public static final String FUNC_GENERATECODE = "generateCode";

    public static final String FUNC_GETRANDOMCODE = "getRandomCode";

    public static final String FUNC_ORDERID = "orderId";

    public static final String FUNC_ORDERTOCODE = "orderToCode";

    public static final String FUNC_ORDERTOMIDDLER = "orderToMiddler";

    public static final String FUNC_ORDERTOSENDER = "orderToSender";

    public static final String FUNC_ORDERS = "orders";

    public static final String FUNC_RECORDDELIVERYPROCESS = "recordDeliveryProcess";

    public static final String FUNC_RECORDRELAY = "recordRelay";

    public static final String FUNC_SAVERECEIPT = "saveReceipt";

    public static final String FUNC_SETNEGOTIATERESULT = "setNegotiateResult";

    public static final String FUNC_UIDTOETHADDR = "uidToEthAddr";

    public static final Event CHARGE_EVENT = new Event("Charge", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event NEGOTIATEPRICE_EVENT = new Event("NegotiatePrice", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public DetectDeliveryProcess(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public DetectDeliveryProcess(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RemoteCall<DetectDeliveryProcess> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DetectDeliveryProcess.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<DetectDeliveryProcess> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DetectDeliveryProcess.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public List<ChargeEventResponse> getChargeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHARGE_EVENT, transactionReceipt);
        ArrayList<ChargeEventResponse> responses = new ArrayList<ChargeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChargeEventResponse typedResponse = new ChargeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChargeEventResponse> chargeEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ChargeEventResponse>() {
            @Override
            public ChargeEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHARGE_EVENT, log);
                ChargeEventResponse typedResponse = new ChargeEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ChargeEventResponse> chargeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHARGE_EVENT));
        return chargeEventObservable(filter);
    }

    public List<NegotiatePriceEventResponse> getNegotiatePriceEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEGOTIATEPRICE_EVENT, transactionReceipt);
        ArrayList<NegotiatePriceEventResponse> responses = new ArrayList<NegotiatePriceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NegotiatePriceEventResponse typedResponse = new NegotiatePriceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._orderID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._receiverEthAddr = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._deliveryPrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._penaltyPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NegotiatePriceEventResponse> negotiatePriceEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NegotiatePriceEventResponse>() {
            @Override
            public NegotiatePriceEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEGOTIATEPRICE_EVENT, log);
                NegotiatePriceEventResponse typedResponse = new NegotiatePriceEventResponse();
                typedResponse.log = log;
                typedResponse._orderID = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._receiverEthAddr = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._deliveryPrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._penaltyPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NegotiatePriceEventResponse> negotiatePriceEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEGOTIATEPRICE_EVENT));
        return negotiatePriceEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> charge(String _orderID) {
        final Function function = new Function(
                FUNC_CHARGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_orderID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> checkResult() {
        final Function function = new Function(FUNC_CHECKRESULT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> compareStr(String _str1, String _str2) {
        final Function function = new Function(
                FUNC_COMPARESTR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_str1), 
                new org.web3j.abi.datatypes.Utf8String(_str2)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, String, String, String>> droneToOrder(String param0) {
        final Function function = new Function(FUNC_DRONETOORDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, String, String, String>>(
                new Callable<Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, String, String, String>>() {
                    @Override
                    public Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> generateCode(String order_id) {
        final Function function = new Function(
                FUNC_GENERATECODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(order_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getRandomCode(String order_id) {
        final Function function = new Function(FUNC_GETRANDOMCODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(order_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> orderId(String param0) {
        final Function function = new Function(FUNC_ORDERID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> orderToCode(String param0) {
        final Function function = new Function(FUNC_ORDERTOCODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<String, Boolean>> orderToMiddler(String param0) {
        final Function function = new Function(FUNC_ORDERTOMIDDLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<String, Boolean>>(
                new Callable<Tuple2<String, Boolean>>() {
                    @Override
                    public Tuple2<String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> orderToSender(String param0) {
        final Function function = new Function(FUNC_ORDERTOSENDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, String, String, String>> orders(BigInteger param0) {
        final Function function = new Function(FUNC_ORDERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, String, String, String>>(
                new Callable<Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, String, String, String>>() {
                    @Override
                    public Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<String, String, String, BigInteger, BigInteger, BigInteger, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> recordDeliveryProcess(String _droneUid, String _uavEthAccount, String _orderID, String _location, String _time, String _state) {
        final Function function = new Function(
                FUNC_RECORDDELIVERYPROCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_droneUid), 
                new org.web3j.abi.datatypes.Address(_uavEthAccount), 
                new org.web3j.abi.datatypes.Utf8String(_orderID), 
                new org.web3j.abi.datatypes.Utf8String(_location), 
                new org.web3j.abi.datatypes.Utf8String(_time), 
                new org.web3j.abi.datatypes.Utf8String(_state)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> recordRelay(String _uid, String _uavEthAccount, String _orderID, BigInteger _relayPrice) {
        final Function function = new Function(
                FUNC_RECORDRELAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uid), 
                new org.web3j.abi.datatypes.Address(_uavEthAccount), 
                new org.web3j.abi.datatypes.Utf8String(_orderID), 
                new org.web3j.abi.datatypes.generated.Uint256(_relayPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> saveReceipt(String _orderID, String _imageReceipt) {
        final Function function = new Function(
                FUNC_SAVERECEIPT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_orderID), 
                new org.web3j.abi.datatypes.Utf8String(_imageReceipt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setNegotiateResult(String _orderID, String _receiverEthAddr, BigInteger _deliveryPrice, BigInteger _penaltyPrice, String _time) {
        final Function function = new Function(
                FUNC_SETNEGOTIATERESULT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_orderID), 
                new org.web3j.abi.datatypes.Address(_receiverEthAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(_deliveryPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(_penaltyPrice), 
                new org.web3j.abi.datatypes.Utf8String(_time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> uidToEthAddr(String param0) {
        final Function function = new Function(FUNC_UIDTOETHADDR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static DetectDeliveryProcess load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DetectDeliveryProcess(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DetectDeliveryProcess load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DetectDeliveryProcess(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class ChargeEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _value;
    }

    public static class NegotiatePriceEventResponse {
        public Log log;

        public byte[] _orderID;

        public String _receiverEthAddr;

        public BigInteger _deliveryPrice;

        public BigInteger _penaltyPrice;
    }
}
